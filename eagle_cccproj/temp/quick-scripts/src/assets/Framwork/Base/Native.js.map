{"version":3,"sources":["assets/Framwork/Base/Native.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { PlatformUtil } from \"../Utils/PlatformUtil\";\n\nconst TAG = \"Native\";\n\n/**\n * 原生接口\n * @author guob\n * @date 2020/07/01\n */\nexport class Native {\n\n    private _callNativeStaticMethod;\n\n    constructor() {\n        this._callNativeStaticMethod = jsb.reflection.callStaticMethod;\n    }\n\n    private static _instance: Native;\n    public static get instance(): Native {\n        if (!this._instance) {\n            this._instance = new Native();\n        }\n        return this._instance;\n    }\n\n    /**\n     * 调用原生方法\n     * @param params \n     */\n    public call(params: {\n        package: string,\n        class: string,\n        method: string,\n        sign?: string,\n        args?: any[],\n    }): string {\n        console.debug(`[${TAG}] _callNative class ${params.class}, method ${params.method}, sign ${params.sign}, paramaters ${params.args}.`)\n        if (!params || !params.class || !params.method) {\n            console.error(`[${TAG}] _callNative illegal paramaters!`)\n            return;\n        }\n\n        try {\n            if (PlatformUtil.isAndroid()) { // 安卓\n                let sign = this._getSign(params.sign);\n                if (this._checkParam(params.args, params.sign)) {\n                    let evalString = \"this._callNativeStaticMethod(params.package+params.class,params.method,sign,\";\n                    params.args.forEach((param, index) => {\n                        evalString += param;\n                        if (index >= params.args.length - 1) {\n                            evalString += \")\";\n                        }\n                    });\n                    eval(evalString);\n                } else {\n                    return this._callNativeStaticMethod(params.class, params.method, sign);\n                }\n            } else if (PlatformUtil.isIOS()) {  // IOS\n                if (this._checkParam(params.args, params.sign)) {\n                    let evalString = \"this._callNativeStaticMethod(params.class,params.method,\";\n                    params.args.forEach((param, index) => {\n                        evalString += param;\n                        if (index >= params.args.length - 1) {\n                            evalString += \")\";\n                        }\n                    });\n                    eval(evalString);\n                } else {\n                    return this._callNativeStaticMethod(params.class, params.method);\n                }\n            } else {    // 其他\n                let sign = this._getSign(params.sign);\n                if (this._checkParam(params.args, params.sign)) {\n                    let evalString = \"this._callNativeStaticMethod(params.package+params.class,params.method,sign,\";\n                    params.args.forEach((param, index) => {\n                        evalString += param;\n                        if (index >= params.args.length - 1) {\n                            evalString += \")\";\n                        }\n                    });\n                    console.log(evalString);\n                    \n                    eval(evalString);\n                } else {\n                    return this._callNativeStaticMethod(params.class, params.method, sign);\n                }\n\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    /**\n     * 参数签名\n     * @param sign 最后一个字符代表返回值，其余为参数\n     * @returns signature \n     * @example _getSign(\"IFBS\") return \"(IFZ)Ljava/lang/String;\"\n     */\n    private _getSign(sign: string): string {\n        if (!sign) return \"()V\";\n\n        let javaSignMap = {\n            I: \"I\",\n            F: \"F\",\n            B: \"Z\",\n            S: \"Ljava/lang/String;\"\n        };\n\n        let sigs = sign.split(\"\");\n        if (!sigs || sigs.length <= 0) return \"()V\";\n\n        let signature = \"(\";\n        sigs.forEach((sig, index) => {\n            if (index >= sigs.length - 1) {\n                signature += \")\";\n            }\n\n            if (!javaSignMap[sig]) {\n                throw new Error(`[${TAG}] _getSign cannot resolve sig:${sig} of ${sign}!`);\n            }\n\n            signature += javaSignMap[sig];\n        });\n        return signature;\n    }\n\n    /**\n     * 检查参数\n     * @param params 参数数组\n     * @param sign 参数签名字符串\n     */\n    private _checkParam(params: any[], sign?: string) {\n        if (!params || params.length <= 0) return;\n\n        let signTypeMap = {\n            I: \"number\",\n            F: \"number\",\n            B: \"boolean\",\n            S: \"string\"\n        }\n\n        let sigs;\n        if (sign) {\n            sigs = sign.substring(0, sign.length - 1).split(\"\");\n            if (sigs.length !== params.length) {\n                throw new Error(`[${TAG}] _checkParam params ${params} do not match signatures ${sign} in length!`);\n            }\n        }\n\n        for (let i = 0; i < params.length; i++) {\n            // 检查参数类型\n            if (!params[i] || typeof (params[i]) != \"number\" || typeof (params[i]) != \"boolean\" || typeof (params[i]) != \"string\") {\n                throw new Error(`[${TAG}] _checkParam illegal params ${params} ${params[i]}!`);\n            }\n\n            // 检查参数签名\n            if (sigs) {\n                if (signTypeMap[sigs[i]] !== typeof (params[i])) {\n                    throw new Error(`[${TAG}] _checkParam params ${params} do not match signatures ${sign}!`);\n                }\n            }\n        }\n        return true\n    }\n\n}"]}