{"version":3,"sources":["assets/Framwork/Base/BaseProtocol.ts"],"names":[],"mappings":";;;;;;;AAAA,mCAAkC;AAClC,yCAA4C;AAC5C,sDAAqD;AAErD,IAAM,GAAG,GAAG,cAAc,CAAC;AAE3B;;GAEG;AACH;IAAA;QACqB,SAAI,GAAG,UAAU,CAAC;QAClB,cAAS,GAAG,GAAG,CAAC;QAEhB,YAAO,GAAG,qBAAqB,CAAC;QAChC,UAAK,GAAG,gBAAgB,CAAC;IAsD9C,CAAC;IAnDU,mCAAY,GAAnB,UAAoB,GAAW;QAC3B,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;YAClC,OAAO,CAAC,KAAK,CAAC,MAAI,GAAG,mCAA8B,GAAK,CAAC,CAAA;YACzD,OAAO;SACV;QAED,IAAI,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;QAClC,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAA;QAC1C,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,CAAA;QAElD,IAAI,2BAAY,CAAC,SAAS,EAAE,IAAI,2BAAY,CAAC,KAAK,EAAE,EAAE;YAClD,OAAO,IAAI,CAAC,UAAU,CAAC;gBACnB,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE,CAAC,IAAI,CAAC;aACf,CAAC,CAAC;SACN;aAAM;YACH,wCAAwC;SAE3C;IACL,CAAC;IAEO,iCAAU,GAAlB,UAAmB,MAMlB;QACG,IAAI,CAAC,MAAM,EAAE;YACT,OAAO,CAAC,KAAK,CAAC,MAAI,GAAG,sCAAmC,CAAC,CAAC;YAC1D,OAAO;SACV;QAED,IAAI,GAAG,GAAG,eAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvC,IAAI;YACA,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAS,CAAC;YACrC,IAAI,MAAM,CAAC,MAAM,IAAI,mBAAO,CAAC,EAAE,EAAE;gBAC7B,OAAO,MAAM,CAAC,IAAI,CAAC;aACtB;iBAAM;gBACH,OAAO,CAAC,KAAK,CAAC,MAAI,GAAG,sCAAiC,MAAM,CAAC,GAAG,MAAG,CAAC,CAAC;gBACrE,OAAO;aACV;SACJ;QAAC,OAAO,KAAK,EAAE;YACZ,OAAO,CAAC,KAAK,CAAC,MAAI,GAAG,yBAAoB,GAAG,2BAAsB,KAAK,MAAG,CAAC,CAAC;YAC5E,OAAO;SACV;IACL,CAAC;IAEL,mBAAC;AAAD,CA3DA,AA2DC,IAAA;AA3DqB,oCAAY","file":"","sourceRoot":"/","sourcesContent":["import { Native } from \"./Native\";\nimport { IRet, EStadus } from \"./IProtocol\";\nimport { PlatformUtil } from \"../Utils/PlatformUtil\";\n\nconst TAG = \"BaseProtocol\";\n\n/**\n * 协议抽象基类\n */\nexport abstract class BaseProtocol {\n    private readonly Head = \"eagle://\";\n    private readonly Separator = \"?\";\n\n    private readonly Package = \"com/eagle/base/jni/\";\n    private readonly Class = \"PlatformSystem\";\n\n\n    public openProtocol(url: string) {\n        if (!url || !url.split(this.Head)[1]) {\n            console.error(`[${TAG}] openProtocol illegal url ${url}`)\n            return;\n        }\n\n        let body = url.split(this.Head)[1]\n        let method = body.split(this.Separator)[1]\n        let args = body.split(this.Separator)[2] || \"null\"\n\n        if (PlatformUtil.isAndroid() || PlatformUtil.isIOS()) {\n            return this.callNative({\n                package: this.Package,\n                class: this.Class,\n                method: method,\n                sign: \"(S)S\",\n                args: [args]\n            });\n        } else {\n            //TODO when call the other host platform\n\n        }\n    }\n\n    private callNative(params: {\n        package: string,\n        class: string,\n        method: string,\n        sign?: string,\n        args?: any[],\n    }): any {\n        if (!params) {\n            console.error(`[${TAG}] callNative params is undefined!`);\n            return;\n        }\n\n        let ret = Native.instance.call(params);\n        try {\n            let retObj = JSON.parse(ret) as IRet;\n            if (retObj.stadus == EStadus.OK) {\n                return retObj.data;\n            } else {\n                console.error(`[${TAG}] callNative return error msg:${retObj.msg}!`);\n                return;\n            }\n        } catch (error) {\n            console.error(`[${TAG}] callNative ret:${ret}, decode exception:${error}!`);\n            return;\n        }\n    }\n\n}"]}